kernel-features:
    question: 
        big: |
            name 2 Linux kernel features that make containers work
    answer: 
        small: |
            1. cgroups
            2. namespaces
            3. capabilities
            4. seccomp-bpf
            5. overlayfs

kernel-feature-memory:
    question: 
        big: |
            which kernel feature lets you restrict memory/cpu usage?
        small: |
            a. cgroups
            b. namespaces
            c. capabilities
            d. seccomp-bpf
            e. overlayfs

    answer: 
        big: cgroups!
        small: |
            cgroups ("control groups") let you set memory and/or CPU limits for a group of processes (and a few other kinds of limits, like IO)

ps-processes:
    question: 
        big: |
            which kernel feature prevents you from seeing other processes on
            the computer when you run `ps` in a container?
        small: |
            a. cgroups
            b. namespaces
            c. capabilities
            d. seccomp-bpf
            e. overlayfs
    answer: 
        big: namespaces
        small: |
            the container has its own PID namespace, so it can only see processes inside its PID namespace

own-pid:
    question: 
        big: |
            can a process have more than one PID?
    answer: 
        big: yes!
        small: |
            a container process will have one PID (like 25) in its PID namespace and a
            different PID (like 32123) in the host PID namespace

layer-implementation:
    question: 
        big: |
            which kernel feature lets you save disk space by sharing layers between containers?
        small: |
            a. cgroups
            b. namespaces
            c. capabilities
            d. seccomp-bpf
            e. overlayfs
    answer: 
        big: overlayfs
        small: |
            it's really easy to experiment and make your own overlays -- the `mount` man page explains how!


docker-required:
    question: 
        big: |
            do you need to use Docker to create a container?
    answer: 
        big: |
            no!
        small: |
            some other container runtimes are systemd-nspawn and LXC

just-use-cgroups:
    question: 
        big: |
            can you use cgroups without using namespaces?
    answer: 
        big: |
            yes!
        small: |
            all of the "container" kernel features (cgroups, namespaces, capabilities, etc) can be used independently of one another

whats-inside:
    question: 
        big: |
            what does it mean to run a command "inside" a container
    answer: 
        small: |
            run the command with the same cgroups and namespaces as the container's processes

namespace-command:
    question: 
        big: |
            what command lets you run a program using a container's mount namespace?
    answer: 
        big: |
            nsenter!
        small: |
            `nsenter -t $PID -a /bin/bash`
            will start a bash shell using the same namespaces as $PID
prevent:
    question: 
        big: |
            which 2 Linux kernel features can prevent a container from using privileged system calls?
        small: |
            1. cgroups
            2. namespaces
            3. capabilities
            4. seccomp-bpf
            5. overlayfs

    answer: 
        big: |
            capabilities
            and seccomp-bpf!
        small: |
            seccomp-bpf whitelists system calls and capabilities only allow certain categories of activity

exceed-memory:
    question: 
        big: |
            what happens if you set a memory limit with cgroups and the container uses more memory than the limit?
    answer: 
        small: |
            depending on your system's configuration, either:

            1. it starts swapping
            2. processes inside the container get OOM (out of memory) killed

ip-address:
    question: 
        big: |
            do containers have their own IP addresses?
    answer: 
        big: |
            often they do!
        small: |
            docker gives containers IP addresses by default. Usually the IP range is 172.17.x.x.

ip-address:
    question: 
        big: |
            can you access a container's IP address from a different computer?
    answer: 
        big: |
            not always!
        small: |
            this is complicated to implement but Kubernetes containers usually have IP addresses that can be accessed from any host in the cluster.

memory-tracking:
    question: 
        big: |
            can you track how much memory / CPU a container is using?
    answer: 
        big: |
            yes!
        small: |
            look for files named memory.usage_in_bytes in /sys/fs/cgroup


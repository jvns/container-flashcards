count:
    question: 
        big: |
            how many rows does
            this query return?
        small: |
            `SELECT COUNT(*)`
            `FROM cats`
            `LIMIT 5`
    answer: 
        big: 1!
        small: |
            `COUNT(*)` returns the number of rows in the table. The `LIMIT` doesn't do anything here.
case:
    question: 
        big: |
            Are SQL keywords like `SELECT` case sensitive?
        small: |
            a. yes!
            b. nope!
    answer: 
        big: nope!
        small: |
            `sElEcT * fRoM cats`
            is a totally valid query! I like to use all caps for readability though.

query-order:
    question: 
        big: |
            is this a valid query?
        small: |
            `FROM cats`
            `SELECT count(*)`
    answer: 
        big: no!
        small: |
            You need to write queries in this order:

            `SELECT ... FROM ... `
            `WHERE ... GROUP BY ... `
            `HAVING ... ORDER BY ...`
            `LIMIT ... `

null-equals:
    question: 
        big: |
            how many rows does
            this query return?
        small: |
            `SELECT * FROM fish`
            `WHERE name = NULL`
    answer: 
        big: 0!
        small: |
            `name = NULL` & `name != NULL` always return false, because nothing is equal to `NULL` (not even `NULL`)

            Use `name IS NULL` instead

coalesce:
    question: 
        big: |
            what does
            `COALESCE(NULL, 23, 49)`
            evaluate to?
        small: |
            a. NULL
            b. 23
            c. 49
    answer: 
        big: 23!
        small: |
            `COALESCE` evaluates to the first non-NULL argument you give it. This is useful for setting default values!


null-integer:
    question:
        big: |
            can an integer column
            have `NULL` values?
        small: |
            a. yes, any type of column can have NULL values
            b. no, an empty integer defaults to 0

    answer:
        big: |
            yes!
        small: |
            any column can have `NULL` values
            (unless you set a `NOT NULL` or `PRIMARY KEY` constraint or something on it when defining the table)

no-nulls:
    question: 
        big: |
            if your tables have no NULLs in them, do you still have to worry about handling NULL values?
        small: |
            a. yes!
            b. nope!
    answer: 
        big: yes!
        small: |
            if you do a LEFT JOIN you can still end up with NULLs in the resulting table!



where-aggregation:
    question: 
        big: |
            is this a valid query?
        small: |
            `SELECT city, COUNT(*)`
            `FROM census`
            `WHERE COUNT(*) > 5 `
            `GROUP BY city`
            `ORDER BY COUNT(*) DESC`
    answer: 
        big: no!
        small: |
            `GROUP BY` happens after `WHERE`, so you can't use aggregations in a `WHERE`.

            Use `HAVING COUNT(*) > 5` instead.

sql-conditionals:
    question: 
        big: |
            can you use
            conditionals in SQL?
        small: |
            a. yes!
            b. nope!
    answer: 
        big: yes!
        small: |
            They look like this:

            `CASE WHEN age > 18 THEN 'adult'`
            `     WHEN age > 12 THEN 'teen'`
            `     ELSE 'child'`
            `END`

strings:
    question: 
        big: |
            how do you represent
            a string in SQL?
        small: |
            a. 'single quotes'
            b. "double quotes"
    answer: 
        big: "'single quotes'"
        small: |
            double quotes don't represent strings in every SQL variant.

            Single quotes are always strings.

inner-join-every-row:
    question: 
        big: |
            do the results of an
            `INNER JOIN` have data from every row in the two tables that get joined?
        small: |
            a. yes!
            b. nope!
    answer: 
        big: nope!
        small: |
            `INNER JOIN`s only include rows that match the `ON` condition.

left-join-every-row:
    question: 
        big: |
            do the results of
            `fish LEFT JOIN people` have data from every row in the `fish` table?
        small: |
            a. yes!
            b. nope!
    answer: 
        big: yes!
        small: |
            `LEFT JOIN`s always include every row in the left table.


index-effectiveness:
    question: 
        big: |
            can an index make your query run 10000 times faster?
        small: |
            a. yes!
            b. no, indexes are good but not THAT good.
    answer: 
        big: yes, for a big table!
        small: |
            if you have many billions of rows, an index can easily make a query run 10000 times faster! The details depend on the exact query and the size of the table.


explain:
    question: 
        big: |
            what's then name of the feature that tells you why your queries are slow?
        small: |
            a. DESCRIBE 
            b. PROFILE
            c. EXPLAIN
            
    answer: 
        big: depends on the SQL variant!
        small: |
            In MySQL and PostgreSQL it's called `EXPLAIN`. It can tell you which indexes your query used and much more


